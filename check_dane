#!/usr/bin/env python3

# Copyright (C) 2014-2016 Felix Geyer <debfx@fobos.de>
# Copyright (C) 2021 Stefan BÃ¼hler <source@stbuehler.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 or (at your option)
# version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import shlex
import subprocess
import sys
import typing

import dns.exception
import dns.flags
import dns.rdatatype
import dns.resolver


VERSION = "1.2+stbuehler"


class NagiosResult:
    def __init__(self, debug: bool=False) -> None:
        self.debug_enabled = debug
        self.info_lines = []
        self.code = 0
        self.main_status = None
        self._code_names = ('OK', 'WARNING', 'CRITICAL', 'UNKNOWN')
        self._code_prio = (0, 2, 3, 1)

    def _log(self, msg: typing.Union[bytes,str]) -> None:
        self.info_lines.append(msg)

    def _status(self, code: int, msg: str) -> None:
        if self._code_prio[code] > self._code_prio[self.code]:
            self.code = code
            self.main_status = msg
        elif msg:
            if code == self.code and self.main_status is None:
                self.main_status = msg
            elif code > 0:
                self._log(self._code_names[code] + ': ' + msg)

    def ok(self, msg: str='') -> None:
        self._status(0, msg)

    def warning(self, msg: str='') -> None:
        self._status(1, msg)

    def critical(self, msg: str='', do_exit: bool=True) -> None:
        self._status(2, msg)
        if do_exit:
            self.exit()

    def unknown(self, msg: str='', do_exit: bool=True) -> None:
        self._status(3, msg)
        if do_exit:
            self.exit()

    def debug(self, msg: typing.Union[bytes,str]) -> None:
        if self.debug_enabled:
            self._log(msg)

    def info(self, msg: typing.Union[bytes,str]) -> None:
        self._log(msg)

    def exit(self) -> None:
        if self.main_status is None:
            print(f'DANE {self._code_names[self.code]}||')
        else:
            print(f'DANE {self._code_names[self.code]} - {self.main_status}||')
        for line in self.info_lines:
            if isinstance(line, bytes):
                print('---')
                sys.stdout.buffer.write(line)
                if not line.endswith(b'\n'):
                    sys.stdout.buffer.write(b'\n')
                print('---')
            else:
                print(line)
        sys.exit(self.code)


NAGIOS_RESULT = None
NagiosResult()


if hasattr(dns.rdatatype, 'RdataType'):
    RdataType = dns.rdatatype.RdataType
    rdtypes = dns.rdatatype.RdataType
else:
    RdataType = int
    rdtypes = dns.rdatatype


class Resolver:
    def __init__(
        self,
        *,
        args: argparse.Namespace,
    ) -> dns.resolver.Resolver:
        resolver = dns.resolver.Resolver()

        if args.timeout and args.timeout != 0:
            resolver.lifetime = args.timeout

        if args.nameserver:
            resolver.nameservers = [args.nameserver]

        if args.dnssec:
            resolver.edns = 0
            resolver.payload = 1280
            resolver.ednsflags = getattr(dns.flags, 'DO')

        if hasattr(resolver, 'resolve'):
            self._resolver = resolver.resolve
        else:
            self._resolver = resolver.query
        self._flag_ad = getattr(dns.flags, 'AD')
        self._args = args

    def resolve(self, name: str, rdtype: RdataType) -> typing.Optional[dns.resolver.Answer]:
        rdtype_txt = dns.rdatatype.to_text(rdtype)
        try:
            answer = self._resolver(name, rdtype=rdtype, raise_on_no_answer=False)

            if self._args.dnssec and not bool(answer.response.flags & self._flag_ad):
                NAGIOS_RESULT.critical(f"DNS response for {name} {rdtype_txt} not DNSSEC validated")
        except dns.resolver.NXDOMAIN as e:
            if self._args.dnssec:
                # extract answer from exception
                answer = e.response(name)
                if not bool(answer.response.flags & self._flag_ad):
                    NAGIOS_RESULT.critical(f"DNS NXDOMAIN response for {name} {rdtype_txt} not DNSSEC validated")
            return None
        except dns.exception.Timeout:
            NAGIOS_RESULT.critical(f"DNS query timeout for {name} {rdtype_txt}")

        if len(answer) == 0:
            return None  # no answer

        return answer

    def resolve_tlsa(self, hostname) -> dns.resolver.Answer:
        tlsa_domain = f"_{self._args.port}._tcp.{hostname}"

        answer = self.resolve(tlsa_domain, rdtypes.TLSA)
        if answer is None:
            NAGIOS_RESULT.critical(f"No DNS TLSA record found: {tlsa_domain}")

        NAGIOS_RESULT.debug(f"Found {tlsa_domain} TLSA records:")
        for tlsa in answer:
            NAGIOS_RESULT.debug(f"- {answer.canonical_name} TLSA {tlsa.to_text()}")

        return answer

    def resolve_mx(self, hostname: str) -> typing.List[str]:
        answer = self.resolve(hostname, rdtypes.MX)
        if answer is None:
            # default to A/AAAA on name directly
            return [hostname]

        def normalize_name(mx: dns.rdtypes.ANY.MX) -> str:
            name = mx.exchange.to_text()
            assert name.endswith('.')
            if name == '.':
                NAGIOS_RESULT.critical(f"Got root name '.' as MX for {hostname}")
            return name[:-1]

        return list({normalize_name(mx) for mx in answer})

    def resolve_address(self, hostname: str) -> typing.List[str]:
        answer_v4 = self.resolve(hostname, rdtypes.A)
        answer_v6 = self.resolve(hostname, rdtypes.AAAA)

        if not (answer_v4 or answer_v6):
            NAGIOS_RESULT.critical(f"No address found for {hostname}")

        return [
            a.address for a in (answer_v4 or ())
        ] + [
            aaaa.address for aaaa in (answer_v6 or ())
        ]
        return addresses


def openssl_test_dane(
    *,
    hostname: str,
    target: str,
    port: int,
    tlsa_records: dns.resolver.Answer,
    starttls: typing.Optional[str],
    timeout:int,
    s2s: bool=True,
) -> str:
    if ':' in target and not target.startswith('['):
        # wrap ipv6 addresses
        target = f'[{target}]'
    rrdata_args = [
        arg
        for tlsa in tlsa_records
        for arg in ('-dane_tlsa_rrdata', tlsa.to_text())
        # server-to-server mustn't use usage types 0 or 1 (those require a trusted CA store)
        if not s2s or tlsa.usage in (2, 3)
    ]
    if starttls:
        starttls_args = ['-starttls', starttls]
    else:
        starttls_args = []

    result = subprocess.run(
        [
            'openssl', 's_client',
            '-brief', '-no_ign_eof',
            '-connect', f'{target}:{port}',
            # verify options
            '-x509_strict',
            '-purpose', 'sslserver',
            '-verify_return_error',
            '-name', hostname,
            # dane
            '-dane_tlsa_domain', hostname,
        ] + rrdata_args + starttls_args,
        stdin=subprocess.DEVNULL,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.PIPE,
        timeout=timeout,
        check=False,
    )
    if NAGIOS_RESULT.debug_enabled:
        sclient_desc = shlex.join(result.args)
    else:
        sclient_desc = f'openssl s_client -connect {target}:{port} -dane_tlsa_domain {hostname} ...'
    if result.returncode == 0:
        if NAGIOS_RESULT.debug_enabled:
            NAGIOS_RESULT.debug(f"{sclient_desc} succeeded, stderr:")
            NAGIOS_RESULT.debug(result.stderr)
        else:
            message = ''
            for line in result.stderr.splitlines():
                if line.startswith(b'DANE TLSA'):
                    message = line.decode('utf-8')
            NAGIOS_RESULT.info(f"{sclient_desc} succeeded:")
            if not message:
                NAGIOS_RESULT.info(result.stderr)
            else:
                NAGIOS_RESULT.info(message)
    else:
        message = None
        for line in result.stderr.splitlines():
            if line.startswith(b'verify error'):
                message = line.split(b':', maxsplit=2)[-1].decode('utf-8')
        if message is None:
            message = result.stderr.splitlines()[0].decode('utf-8')
        NAGIOS_RESULT.critical(message, do_exit=False)
        NAGIOS_RESULT.critical(f'{sclient_desc} failed with exit code {result.returncode}, stderr:', do_exit=False)
        NAGIOS_RESULT.info(result.stderr)
        NAGIOS_RESULT.exit()


def main() -> None:
    parser = argparse.ArgumentParser(
        description=
            "Nagios/Icinga plugin for checking DANE/TLSA records.\n"
            "It compares the DANE/TLSA record against the TLS certificate provided "
            "by a service."
    )

    parser.add_argument("--host", "-H", dest="host", required=True, help="Hostname to check.")
    parser.add_argument("--port", "-p", type=int, required=True, help="TCP port to check.")
    parser.add_argument("--connect-host", "--ip", "-I", dest="connect_host", help="Connect to this host instead of --host.")
    parser.add_argument("--connect-port", dest="connect_port", help="Connect to this port instead of --port.")
    parser.add_argument("--starttls", help="Send the protocol-specific messages to enable TLS.")
    parser.add_argument("--mx", action="store_true", help="Send the protocol-specific messages to enable TLS.")
    parser.add_argument("--no-dnssec", dest="dnssec", action="store_false", help="Continue even when DNS replies aren't DNSSEC authenticated.")
    parser.add_argument("--nameserver", help="Use a custom nameserver.")
    parser.add_argument("--timeout", type=int, default=10, help="Network timeout in sec. Default: 10")
    parser.add_argument("--version", action="version", version="%(prog)s " + VERSION)
    parser.add_argument("--s2s", action="store_true", help="Server to server - ignore PKIX-TA(0) and PKIX-EE(1) TLSA records.")
    parser.add_argument("--debug", "-d", action="store_true", help="Active debug logging")
    args = parser.parse_args()

    global NAGIOS_RESULT
    NAGIOS_RESULT = NagiosResult(debug=args.debug)

    pyver = sys.version_info
    if pyver[0] < 3 or (pyver[0] == 3 and pyver[1] < 4):
        NAGIOS_RESULT.unknown("check_dane requires Python >= 3.4")

    if args.port < 1 or args.port > 65535:
        NAGIOS_RESULT.unknown("Invalid port")
    if args.connect_port and (args.connect_port < 1 or args.connect_port > 65535):
        NAGIOS_RESULT.unknown("Invalid connect port")

    if args.timeout < 0:
        NAGIOS_RESULT.unknown("Invalid timeout argument")

    resolver = Resolver(args=args)

    target_hosts = (args.host,)
    if args.mx:
        args.s2s = True  # MX is always server-to-server
        if args.starttls and args.starttls != "smtp":
            NAGIOS_RESULT.unknown("--mx only works with --starttls smtp (or just omit starttls)")
        args.starttls = "smtp"
        if args.port != 25:
            NAGIOS_RESULT.unknown("--mx requires --port 25")
        if args.connect_host or args.connect_port:
            NAGIOS_RESULT.unknown("--mx conflicts with --connect-host and --connect-port")
        target_hosts = resolver.resolve_mx(args.host)

    if args.connect_host or args.connect_port:
        all_targets = (
            (args.host, [(args.connect_host or args.host, args.connect_port or args.port)])
        )
    else:
        all_targets = (
            (hostname, [
                (address, args.port)
                for address in resolver.resolve_address(hostname)
            ])
            for hostname in target_hosts
        )

    for hostname, targets in all_targets:
        tlsa_records = resolver.resolve_tlsa(hostname)
        for target_ip, target_port in targets:
            openssl_test_dane(
                hostname=hostname,
                target=target_ip,
                port=target_port,
                tlsa_records=tlsa_records,
                starttls=args.starttls,
                timeout=args.timeout,
                s2s=args.s2s,
            )


if __name__ == "__main__":
    main()
    if not NAGIOS_RESULT is None:
        NAGIOS_RESULT.exit()

# kate: space-indent on; indent-width 4;
